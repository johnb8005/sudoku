{"version":3,"sources":["layout.js","lib/sudoku.js","sudoku.js","anagram.js","routes.js","serviceWorker.js","index.js"],"names":["style","borderTop","borderBottom","boxShadow","props","Fragment","className","to","role","children","newSet","dim","Array","fill","map","_","i","initSolset","sudoku","s","getRowCoords","x","k","getColCoords","getCellCoords","r","a1","a2","Math","floor","j","push","checkRow","row","coords","temps","filter","includes","listof2","twoPossibilities","isArray","length","flatMap","y","compareArray","list2Possibilities","substractArray","substractArrayFromArray","a","b","ss","mergedSs","concat","apply","checkDim","funcCoord","rowIdx","solveIteration","strategies","pop","solve","nEpochs","console","log","nFound","solveWithInit","nIteration","s0","createArraySeqInt","n","styleTd","border","height","width","textAlign","padding","SudokuLayout","onChange","v","target","value","Number","state","setState","handleSolve","SudokuSolve","this","borderCollapse","fontFamily","key","borderRight","type","step","onClick","React","Component","P","Default","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.48c562be.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nconst style = {\n  borderTop: '1px solid #e5e5e5',\n  borderBottom: '1px solid #e5e5e5',\n  boxShadow: '0 .25rem .75rem rgba(0, 0, 0, .05)'\n}\n\nexport default (props) => {\n  return (<React.Fragment>\n    <header>\n      <div style={style} className=\"d-flex flex-column flex-md-row align-items-center p-3 px-md-4 mb-3 bg-white\">\n      <h5 className=\"my-0 mr-md-auto font-weight-normal\"><Link to=\"/\">Sudoku</Link></h5>\n      <nav className=\"my-2 my-md-0 mr-md-3\">\n        <Link className=\"p-2 text-dark\" to=\"/sudoku\">Sudoku</Link>\n        <Link className=\"p-2 text-dark\" to=\"/anagram\">Anagram</Link>\n      </nav>\n    </div>\n    </header>\n\n    <main role=\"main\">\n      <div className=\"container\">\n        {props.children}\n      </div>\n    </main>\n  </React.Fragment>);\n}\n","\n// sudoku solver\n// the sudoku board is linearized in a simple array[Option[Int]]\n// there is a solution set array that contain all possible combination: array[array[Int]]\n\n// in all the below functions, the parameter `dim` is the number of dimensions for the sudoku. The traditional sudoku has `dim=3`\n\n/**\n * creates a new (unit) set: [1, 2, 3, ...]\n * @return [1, 2, 3, ...]\n */\nexport const newSet = (dim) => Array(dim * dim).fill(0).map((_,i) => i + 1);\n\n/**\n * [description]\n * @param  sudoku: given sudoku linearized. Empty cells are `nulls`\n * @param  \n * @return sudoku but all `nulls` are replaced with an array of all possibilities\n */\nexport const initSolset = (sudoku, dim = 3) => {\n  return sudoku.map((s, i) => {\n    if (s) {\n      return s;\n    }\n\n    return newSet(dim);\n  });\n}\n\n/**\n * get the list of coordinates for a row\n * @param  i: row index (starts at 1)\n * @return e.g. [1, 2, 3, ...]\n */\nexport const getRowCoords = (i, dim = 3) => Array(dim * dim).fill(0).map((x, k) =>  i*dim*dim + k);\n\n/**\n * get the list of coordinates for a column\n * @param  i: row index (starts at 1)\n * @return e.g. [1, 9, 18, ...]\n */\nexport const getColCoords = (i, dim = 3) => Array(dim * dim).fill(0).map((x, k) =>  i + dim*dim*k);\n\n/**\n * get the list of coordinates for a cell of cells (in regular sudoku, 3x3 cells)\n * @param  i: row index (starts at 1)\n * @return e.g. [1, 2, 3, 9, 10, 11, ...]\n */\nexport const getCellCoords = (i, dim = 3) => {\n  if (dim === 3) {\n    if (i=== 0) return [0, 1, 2,  9, 10, 11, 18, 19, 20];\n    if (i=== 1) return [3, 4, 5, 12, 13, 14, 21, 22, 23];\n    if (i=== 2) return [6, 7, 8, 15, 16, 17, 24, 25, 26];\n  // second three cells (from left to right)\n    if (i=== 3) return [27, 28, 29, 36, 37, 38, 45, 46, 47];\n    if (i=== 4) return [30, 31, 32, 39, 40, 41, 48, 49, 50];\n    if (i=== 5) return [33, 34, 35, 42, 43, 44, 51, 52, 53];\n  // third three cells (from left to right)\n    if (i=== 6) return [54, 55, 56, 63, 64, 65, 72, 73, 74];\n    if (i=== 7) return [57, 58, 59, 66, 67, 68, 75, 76, 77];\n    if (i=== 8) return [60, 61, 62, 69, 70, 71, 78, 79, 80];\n  }\n\n\n  const r = [];\n\n  // first adder\n  const a1 = (i % dim )*dim;\n  // second adder\n  const a2 = Math.floor(i/2)*dim*dim*dim;\n\n  for (let j = 0; j < dim; j++) {\n    for (let k = 0; k < dim; k++) {\n      const x = a1 + a2 + j*dim*dim +k;\n      r.push(x);\n    }\n  }\n\n  return r;\n}\n\nexport const list2Possibilities = (row, coords) => {\n  // filter out all the cells that have 2 digits as a possibility\n  const twoPossibilities = row.filter((r, i) => Array.isArray(r) && r.length === 2 && coords.includes(i));\n\n  // keep the duplicates\n  // go through the upper right triangle (avoid extra unnecessary computation) matrix (formed by the two vectors)\n  return twoPossibilities.flatMap((x, i) => {\n    return twoPossibilities.map((y, j) => {\n      if (i > j && compareArray(x, y)) {\n        return x;\n      }\n\n      return null;\n    });\n  })\n  .filter(_ => _ !== null);\n}\n\n/**\n * looks at one \"set\". a set here is defined as an array where all elements should uniquely contain all digits. In the normal sudoku, that includes rows, cells and columns\n * @param row: full array of sudoku\n * @param coords: coords that represent the \"set\"\n * @return full array but without redundancies within a particular set; if a set contained both `1` and `[1, 3]`, the functoin would return for these cells `1` and `3`\n */\nexport const checkRow = (row, coords) => {\n  const temps = row.filter((r, i) => typeof r === 'number' && coords.includes(i));\n\n  const listof2 = list2Possibilities(row, coords)\n\n  return row.map((r, i) => {\n    // check if it is a single digit\n    if(typeof r === 'number' || !coords.includes(i)) {\n      return r;\n    }\n\n    // when an array substract the other ruled out possibilities (without substrating itself)\n    const x = substractArray(r, temps);\n    const y = substractArrayFromArray(x, listof2);\n\n    if (y.length === 1) {\n      return y[0];\n    }\n\n    return y;\n  });\n}\n\n/**\n * compares two unsorted array \n * @param  {[type]} a [description]\n * @param  {[type]} b [description]\n * @return true if same array\n */\nexport const compareArray = (a, b) => {\n  if ( a.length !== b.length) {\n    return false;\n  }\n  return a.filter(function(i) {\n    return !b.includes(i);\n  }).length === 0;  \n}\n\n/**\n * substract array s from a\n */\nexport const substractArray = (a, s) => a.filter(x => !s.includes(x));\n\nexport const substractArrayFromArray = (a, ss) => {\n  if (a.length === 2 && !compareArray(a, ss)) {\n    return a;\n  }\n\n  const mergedSs = [].concat.apply([], ss);\n\n  return substractArray(a, mergedSs);\n}\n\n/**\n * generalization of checkRow\n * @param  {[type]} funcCoord : the function that describes the set\n\n */\nexport const checkDim = (sudoku, funcCoord, dim, rowIdx = 0) => {\n  if (rowIdx === dim * dim ) {\n    return sudoku;\n  }\n\n  const coords = funcCoord(rowIdx, dim);\n  const s = checkRow(sudoku, coords);\n\n  return checkDim(s, funcCoord, dim, rowIdx + 1);\n}\n\n/**\n * go through all types of \"set\" once\n * @param  {[type]} sudoku         [description]\n * @return sudoku array without redundancies that were found.\n */\nexport const solveIteration = (sudoku, dim = 3, strategies = [getRowCoords, getColCoords, getCellCoords]) => {\n  if (strategies.length === 0) {\n    return sudoku;\n  }\n\n  const s = checkDim(sudoku, strategies.pop(), dim);\n  \n  return solveIteration(s, dim, strategies);\n}\n\n/**\n * iterates over `solveIteration`\n */\nexport const solve = (sudoku, dim = 3, nEpochs = 30) => {\n  //console.log(`=== computing epoch ${nEpochs} (counting backwards) ===`)\n  if (nEpochs === 0) {\n    console.log(`algorithm after all epochs were exhausted (${nEpochs})`);\n    return sudoku;\n  }\n\n  const nFound = sudoku.filter(x => typeof x !== 'number').length;\n\n  //console.log(`the grid contains ${nFound}/${dim ** 4} cells that are undefined (${(100 * nFound/(dim ** 4)).toFixed(2)}%)`)\n\n  // check if something is left to solve, else return array\n  if(nFound === 0) {\n    console.log(`algorithm aborted early at epochs ${nEpochs}`);\n    return sudoku;\n  }\n\n  const s = solveIteration(sudoku, dim);\n\n  return solve(s, dim, nEpochs - 1);\n}\n\nexport const solveWithInit = (sudoku, dim = 3, nIteration = 30) => {\n  const s0 = initSolset(sudoku);\n  return solve(s0, dim, nIteration);\n}\n\n\nexport const printSudoku = (s, dim = 3, cutoff = 2) => Array(dim**2).fill(0).map((_, j) => {\n  return s\n    .filter((x, i) => i >= j*9 && i <= (j+1)*9 -1)\n    .map(x => x.length > cutoff ? `(-${x.length}-)` : x )\n    .reduce((a, b) => `${a} \\t${b}`);\n})\n.reduce((a, b) => `${a}\\n${b}`);\n","import React from 'react';\n\nimport * as SudokuSolve from './lib/sudoku';\n\nconst createArraySeqInt = (n = 9 ) => Array(...Array(n)).map((_, i) => i);\n\nconst styleTd = {\n  border: 'solid thin',\n  height: '2.4em',\n  width: '2.4em',\n  textAlign: 'center',\n  padding: 0\n};\n\nexport default class SudokuLayout extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const s = [\n      null, null, null, 4, null, null, null, 8, null,\n      null, null, 6, null, 8, null, 1, null, 3,\n      null, 8, null, 1, null, 3, null, 5, null,\n      2, null, null, null, 6, null, 8, null, 1,\n      null, 6, null, 8, null, 1, null, 3, 4,\n      null, null, 1, null, 3, 4, null, 6, null,\n      null, 4, null, 6, 7, null, 9, null, 2,\n      6, null, null, 9, null, 2, null, 4, 5,\n      null, null, 2, null, null, null, null, null, null\n    ];\n\n    this.state = {s};\n  }\n\n  onChange = (k, v) => {\n    const x = v.target.value;\n\n    if (Number(x) && x > 0) {\n      const { s } = this.state;\n\n      s[k] = Number(x);\n\n      this.setState(s);\n    }\n  }\n\n  handleSolve = () => {\n    console.log('solve!')\n\n    const s = SudokuSolve.solveWithInit(this.state.s);\n\n    this.setState({s});\n  }\n\n  render() {\n    const { s } = this.state;\n\n    return (<div>\n      <table style={{borderCollapse: 'collapse', fontFamily: 'Calibri, sans-serif'}}>\n        <tbody>\n          {createArraySeqInt().map(i => <tr key={i} style={i%3 === 2 ? {borderBottom: 'solid medium'} : {}}>{createArraySeqInt().map(j => {\n            const k = i*9 + j;\n            const v = Number(s[k]) && s[k] > 0 ? s[k]: '';\n            return (<td key={j + '-' + i} style={j%3 === 2 ? {...styleTd, borderRight: 'solid medium'} : styleTd}>\n              <input type=\"text\" step=\"false\" onChange={(x) => this.onChange(k, x)} value={v} style={{width: '100%', 'MozAppearance': 'textfield', border: 0}}/>\n            </td>);\n          })}</tr>)}\n        </tbody>\n      </table>\n    <br/>\n    <button className=\"btn btn-primary\" onClick={this.handleSolve}>Solve</button>\n    </div>);\n  }\n}\n","import React from 'react';\n\nconst P = () => <p><i>Not implemented yet</i></p>\n\nexport default P;","import React from 'react';\n\nimport {BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n\nimport Layout from './layout';\nimport Sudoku from './sudoku';\nimport Anagram from './anagram';\n\nconst Default = () => <p>Click on the menu to get started</p>;\n\nexport default class App extends React.Component {\n  render() { \n    return (\n     \n      <Router>\n       <Layout>\n        <Switch>\n          <Route exact path=\"/sudoku\" component={() => <Sudoku/>}/>\n          <Route exact path=\"/anagram\" component={() => <Anagram/>}/>\n          <Route component={() => <Default/>}/>\n        </Switch>\n        </Layout>\n      </Router>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport Routes from './routes';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Routes />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}